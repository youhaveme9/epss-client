[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "epss-client"
version = "2.0.0"
description = "Typed Python client and CLI for FIRST EPSS (Exploit Prediction Scoring System) API"
readme = "README.md"
requires-python = ">=3.8"
authors = [
  { name = "Roshan Kumar", email = "roshaen09@gmail.com" }
]
license = { text = "MIT" }
dependencies = [
  "requests>=2.28.0,<3.0.0",
]
keywords = ["EPSS", "FIRST", "CVE", "security", "vulnerabilities", "api", "client"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Security",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/youhaveme9/epss-client"
Repository = "https://github.com/youhaveme9/epss-client"
Issues = "https://github.com/youhaveme9/epss-client/issues"
Documentation = "https://api.first.org/epss"

[project.optional-dependencies]
test = [
  "pytest>=7.0",
]
dev = [
  "pytest>=7.0",
  "ruff>=0.1.0",
  "black>=23.0.0",
  "isort>=5.12.0",
  "pre-commit>=3.0.0",
]
cache-redis = [
  "redis>=4.0.0",
  "hiredis>=2.0.0",
]
cache-db = [
  "sqlalchemy>=2.0.0",
  "alembic>=1.8.0",
]
cache-full = [
  "redis>=4.0.0",
  "hiredis>=2.0.0", 
  "sqlalchemy>=2.0.0",
  "alembic>=1.8.0",
  "pyyaml>=6.0",
]
config = [
  "pyyaml>=6.0",
  "toml>=0.10.0",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"epss_client" = ["py.typed"]

[project.scripts]
epss = "epss_client.cli:main"

# Development tools configuration
[tool.ruff]
target-version = "py38"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["epss_client"]
force-single-line = true

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["epss_client"]
force_single_line = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert statements and shell injection (false positives)
